@model testNETCORE.Models.Tour
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Thêm Tour Mới";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}
<script src="~/ckeditor5-build-classic/ckeditor.js"></script>

    <h4>Tour</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <form asp-action="AddTour" asp-area="Admin" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="IdTour" class="control-label"></label>
                <input asp-for="IdTour" class="form-control" type="text"/>
                <span asp-validation-for="IdTour" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TourName" class="control-label"></label>
                <input asp-for="TourName" class="form-control" type="text" />
                <span asp-validation-for="TourName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Idcategory" class="control-label"></label>
                <select asp-for="Idcategory" class ="form-control" >
                    <option disabled selected hidden>Chọn loại Tour</option>
                    <option value=1>Tour Trong Nước</option>
                    <option value="2">Tour Ngoài Nước</option>
                </select>
                <span asp-validation-for="Idcategory" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Destination1" class="control-label"></label>
                <input asp-for="Destination1" class="form-control" type="text" />
                <span asp-validation-for="Destination1" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Destination2" class="control-label"></label>
                <input asp-for="Destination2" class="form-control" type="text" />
                <span asp-validation-for="Destination2" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Destination3" class="control-label"></label>
                <input asp-for="Destination3" class="form-control" type="text" />
                <span asp-validation-for="Destination3" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Image1" class="control-label"></label>
                <input asp-for="Image1" class="form-control" type="text" />
                <span asp-validation-for="Image1" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Image2" class="control-label"></label>
                <input asp-for="Image2" class="form-control" type="text" />
                <span asp-validation-for="Image2" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Image3" class="control-label"></label>
                <input asp-for="Image3" class="form-control" type="text" />
                <span asp-validation-for="Image3" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PriceForAdult" class="control-label"></label>
                <input asp-for="PriceForAdult" class="form-control" type="number" />
                <span asp-validation-for="PriceForAdult" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PriceForChildren" class="control-label"></label>
                <input asp-for="PriceForChildren" class="form-control" type="number" />
                <span asp-validation-for="PriceForChildren" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="NdaysNnights" class="control-label"></label>
                <input asp-for="NdaysNnights" class="form-control" type="text" />
                <span asp-validation-for="NdaysNnights" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StartDate" class="control-label"></label>
                <input asp-for="StartDate" class="form-control" type="date" />
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EndDate" class="control-label"></label>
                <input asp-for="EndDate" class="form-control" type="date" />
                <span asp-validation-for="EndDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="JourneyHightlight" class="control-label"></label>
                <textarea id="JourneyHighlightCK" asp-for="JourneyHightlight" placeholder="Nhập nội dung..."></textarea>
                <span asp-validation-for="JourneyHightlight" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TravelingSchedule" class="control-label"></label>
                <textarea id="TravelingScheduleCK" asp-for="TravelingSchedule" placeholder="Nhập nội dung..."></textarea>
                <span asp-validation-for="TravelingSchedule" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea id="DescriptionCK" asp-for="Description" placeholder="Nhập nội dung..."></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Link" class="control-label"></label>
                <input asp-for="Link" class="form-control" type="text" />
                <span asp-validation-for="Link" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <select asp-for="Idcategory" class="form-control">
                        <option disabled selected hidden>Ẩn</option>
                        <option value=1>Ẩn</option>
                        <option value="0">Hiện</option>
                    </select>
                </label>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
<script>
    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload. It sounds scary but do not
            // worry — the loader will be passed into the adapter later on in this guide.
            this.loader = loader;
        }
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', '@Url.Action("UploadImage", "Admin")', true);
            xhr.responseType = 'json';
        }
        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }
        _sendRequest(file) {
            // Prepare the form data.
            const data = new FormData();

            data.append('upload', file);

            // Important note: This is the right place to implement security mechanisms
            // like authentication and CSRF protection. For instance, you can use
            // XMLHttpRequest.setRequestHeader() to set the request headers containing
            // the CSRF token generated earlier by your application.

            // Send the request.
            this.xhr.send(data);
        }
    }
    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your back-end here!
            return new MyUploadAdapter(loader);
        };
    }
    ClassicEditor
        .create(document.querySelector('#JourneyHighlightCK'), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
        })
        .then(editor => {
            window.editor = editor;
        })
        .catch(err => {
            console.error(err.stack);
        });
    ClassicEditor
        .create(document.querySelector('#TravelingScheduleCK'), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
        })
        .then(editor => {
            window.editor = editor;
        })
        .catch(err => {
            console.error(err.stack);
        });
    ClassicEditor
        .create(document.querySelector('#DescriptionCK'), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
        })
        .then(editor => {
            window.editor = editor;
        })
        .catch(err => {
            console.error(err.stack);
        });
</script>
